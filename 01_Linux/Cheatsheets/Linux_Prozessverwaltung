Hier ist eine ausführliche Erklärung zu systemctl

Init-System und Prozessverwaltung:

Traditionell ist das Init-System das erste Programm, das beim Booten eines 
Unix-ähnlichen Systems gestartet wird. Es initialisiert das Betriebssystem, 
tartet Dienste und Prozesse und verwaltet Ressourcen. Systemd übernimmt diese 
Rolle und geht darüber hinaus, indem es viele moderne Funktionen hinzufügt.
Eigenschaften und Aufgaben von systemd:


    Dienste verwalten:
        systemctl start <service>: Startet einen Dienst.
        systemctl stop <service>: Stoppt einen Dienst.
        systemctl restart <service>: Startet einen Dienst neu.
        systemctl enable <service>: Aktiviert einen Dienst, um ihn beim Systemstart zu starten.
        systemctl disable <service>: Deaktiviert einen Dienst, sodass er beim Systemstart nicht gestartet wird.

    Systemd-Unit-Dateien verwalten:
        systemctl list-units: Zeigt eine Liste aller geladenen Units an.
        systemctl list-unit-files: Zeigt eine Liste aller verfügbaren Unit-Dateien an.
        systemctl cat <unit>: Zeigt den Inhalt einer Unit-Datei an.

    Dienstabhängigkeiten und Reihenfolge:
        systemctl show <service>: Zeigt detaillierte Informationen über einen Dienst an, einschließlich seiner Abhängigkeiten.
        systemctl list-dependencies <service>: Zeigt die Abhängigkeiten eines Dienstes an.

    Systemd-Targets:
        systemctl isolate <target>: Wechselt zu einem bestimmten Ziel (Runlevel).
        systemctl get-default: Zeigt das Standardziel an, das beim Systemstart verwendet wird.
        systemctl set-default <target>: Legt das Standardziel fest, das beim Systemstart verwendet werden soll.

    Logging und Journaling:
        journalctl: Zeigt das System-Log an.
        journalctl -u <unit>: Zeigt das Log für eine bestimmte Unit an.
        journalctl -f: Folgt dem Log in Echtzeit.
        journalctl -n <number>: Zeigt die letzten N Einträge des Logs an.

    Weitere Befehle:
        systemctl reboot: Startet das System neu.
        systemctl poweroff: Fährt das System herunter.
        systemctl suspend: Versetzt das System in den Ruhezustand.
        systemctl hibernate: Versetzt das System in den Ruhemodus.
        systemctl hybrid-sleep: Versetzt das System in den Hybrid-Ruhemodus (Kombination aus Suspend und Hibernate).

Administrative Aufgaben mit systemd:

    Dienstverwaltung: Starten, Stoppen, Neustarten, Aktivieren und 
    Deaktivieren von Diensten mit systemctl.

    Systemstatus überwachen: Überwache den Status von Diensten und 
    Ressourcen mit systemctl status.

    Logs anzeigen: Zeige Protokolle und Systemausgaben mit journalctl 
    an.

    Service-Unit-Dateien: Bearbeite oder erstelle Service-Unit-Dateien, 
    um das Verhalten von Diensten zu konfigurieren.


Anpassung des Systems mit systemd:

    Bearbeiten von Service-Unit-Dateien: Du kannst die Konfigurationsparameter
    eines Dienstes in seiner Service-Unit-Datei anpassen, um das Verhalten zu ändern.

    Eigene Service-Unit-Dateien erstellen: Erstelle eigene Service-Unit-Dateien, 
    um benutzerdefinierte Dienste oder Aufgaben zu erstellen.

    Dienstabhängigkeiten definieren: Definiere Abhängigkeiten zwischen Diensten, 
    um die Reihenfolge des Systemstarts zu steuern.

    Ressourcenkontrolle: Verwende cgroups, um die Ressourcennutzung von Diensten 
    zu steuern.

    Systemd-Target-Units: Ändere die Startziele, um das Verhalten des Systems 
    beim Booten zu steuern, ähnlich wie Runlevels in älteren Systemen.


1. Starten, Stoppen und Neustarten von Diensten:

    Starten eines Dienstes: systemctl start service-name startet 
einen Dienst sofort.

    Stoppen eines Dienstes: systemctl stop service-name

    Neustarten eines Dienstes: systemctl restart service-name 

1. Aktivieren und Deaktivieren von Diensten:

    Dienst aktivieren: systemctl enable service-name 
    bewirkt, dass ein Dienst beim Systemstart automatisch gestartet wird.

    Dienst deaktivieren: systemctl disable service-name 
    verhindert, dass ein Dienst beim Systemstart automatisch gestartet wird.

2. Status und Informationen zu Diensten:

    Dienststatus anzeigen: systemctl status service-name 
    zeigt den aktuellen Status eines Dienstes an.

    Dienstinformationen anzeigen: systemctl show service-name 
    zeigt ausführliche Informationen zu einem Dienst.

3. Weitere Befehle:

    Neu laden von Konfigurationen: systemctl reload service-name 
    lädt die Konfiguration eines Dienstes neu, ohne den Dienst neu zu starten.

    Überprüfen der Dienstaktivierung: systemctl is-enabled service-name 
    überprüft, ob ein Dienst beim Systemstart aktiviert ist.

    Überprüfen des Dienststatus: systemctl is-active service-name 
    überprüft den aktuellen Status eines Dienstes.

4. Einheitenarten in systemctl:

    Service-Units: Diese repräsentieren Dienste, die im Hintergrund 
    ausgeführt werden, z. B. Webserver, Datenbanken usw.

    Socket-Units: Diese überwachen Netzwerksockets und können Dienste 
    aktivieren, sobald eine Verbindung auf dem angegebenen Port eingeht.

    Timer-Units: Diese lösen Dienste basierend auf Zeitplänen aus und 
    werden häufig für geplante Aufgaben verwendet.

5. Beispiel: Apache-Webserver:

    systemctl start apache2 startet den Apache-Webserver.
    systemctl stop apache2 stoppt den Apache-Webserver.
    systemctl restart apache2 startet den Apache-Webserver neu.
    systemctl enable apache2 aktiviert den Apache-Webserver für den Autostart beim Systemstart.
    systemctl status apache2 zeigt den Status des Apache-Webservers an.

Weitere nützliche Befehle und Infos:

sudo systemctl daemon-reload # lädt die systemd-Konfiguration neu (nach Änderung)


Aufgaben:

    Starten, Stoppen und Überprüfen von Diensten:
        Starten Sie den SSH-Dienst.
        Stoppen Sie den SSH-Dienst.
        Überprüfen Sie den Status des SSH-Dienstes, um sicherzustellen, dass er gestoppt ist.

        

    Aktivieren und Deaktivieren von Diensten:
        Aktivieren Sie den Apache HTTP Server, um sicherzustellen, dass er beim Systemstart gestartet wird.
        Deaktivieren Sie den Apache HTTP Server, sodass er beim nächsten Systemstart nicht gestartet wird.

    Anzeigen von Systemd-Unit-Dateien:
        Zeigen Sie den Inhalt der Unit-Datei für den SSH-Dienst an.
        Zeigen Sie eine Liste aller verfügbaren Unit-Dateien an.

    Verwalten von Systemd-Targets:
        Wechseln Sie zum Multi-User-Textziel, um in den entsprechenden Runlevel zu gelangen.
        Legen Sie das Standardziel auf das Graphical-Target fest, damit das System standardmäßig in die grafische Oberfläche startet.

    Dienstabhängigkeiten überprüfen:
        Zeigen Sie die Abhängigkeiten des Apache-Dienstes an.
        Überprüfen Sie die Abhängigkeiten des SSH-Dienstes, um festzustellen, welche anderen Dienste er benötigt.

    Logging und Journaling:
        Zeigen Sie die letzten 20 Einträge im Systemjournal an.
        Verfolgen Sie das Systemjournal in Echtzeit, während Sie den Apache-Dienst starten und stoppen.

    Systemsteuerungsbefehle:
        Starten Sie das System neu.
        Fahren Sie das System herunter.
        Versetzen Sie das System in den Ruhezustand.

    Überprüfen von Dienständerungen:
        Überprüfen Sie das Journal, um alle Änderungen an Diensten in den letzten 24 Stunden anzuzeigen.

    Überprüfen des Systemstartverhaltens:
        Zeigen Sie die Reihenfolge an, in der Dienste beim Systemstart gestartet werden.

    Service-Management und User-Sessions:

    Aktivieren Sie einen eigenen benutzerdefinierten Dienst, der bei Ihrer Anmeldung gestartet wird.
    Überprüfen Sie den Status des benutzerdefinierten Dienstes.



Unit/Service-Files:

Die Systemd Unit-Files liegen unter /usr/lib/systemd/system
und definieren wie genau und mit welchen Abhängigkeiten systemd-Dienste gestartet werden.
Beispielsweise hat man in der /usr/lib/systemd/system/syncthing@.service Datei einen 
Parameter"After=network.target", was grundlegend heißt, dass der Service syncthing erst 
gestartet werden darf, sobald das Network auf dem jew Target (mein Laptop)gestartet.

Eine elegantere Version um die systemd-Dienste anzuzeigen wäre, sie über systemctl list-unit-files --type=service aufzulisten 



systemctl Manual:

systemctl [OPTIONS...] COMMAND ...

Query or send control commands to the system manager.

Unit Commands:
  list-units [PATTERN...]             List units currently in memory
  list-sockets [PATTERN...]           List socket units currently in memory,
                                      ordered by address
  list-timers [PATTERN...]            List timer units currently in memory,
                                      ordered by next elapse
  is-active PATTERN...                Check whether units are active
  is-failed PATTERN...                Check whether units are failed
  status [PATTERN...|PID...]          Show runtime status of one or more units
  show [PATTERN...|JOB...]            Show properties of one or more
                                      units/jobs or the manager
  cat PATTERN...                      Show files and drop-ins of specified units
  help PATTERN...|PID...              Show manual for one or more units
  list-dependencies [UNIT...]         Recursively show units which are required
                                      or wanted by the units or by which those
                                      units are required or wanted
  start UNIT...                       Start (activate) one or more units
  stop UNIT...                        Stop (deactivate) one or more units
  reload UNIT...                      Reload one or more units
  restart UNIT...                     Start or restart one or more units
  try-restart UNIT...                 Restart one or more units if active
  reload-or-restart UNIT...           Reload one or more units if possible,
                                      otherwise start or restart
  try-reload-or-restart UNIT...       If active, reload one or more units,
                                      if supported, otherwise restart
  isolate UNIT                        Start one unit and stop all others
  kill UNIT...                        Send signal to processes of a unit
  clean UNIT...                       Clean runtime, cache, state, logs or
                                      configuration of unit
  freeze PATTERN...                   Freeze execution of unit processes
  thaw PATTERN...                     Resume execution of a frozen unit
  set-property UNIT PROPERTY=VALUE... Sets one or more properties of a unit
  bind UNIT PATH [PATH]               Bind-mount a path from the host into a
                                      unit's namespace
  mount-image UNIT PATH [PATH [OPTS]] Mount an image from the host into a
                                      unit's namespace
  service-log-level SERVICE [LEVEL]   Get/set logging threshold for service
  service-log-target SERVICE [TARGET] Get/set logging target for service
  reset-failed [PATTERN...]           Reset failed state for all, one, or more
                                      units
Unit File Commands:
  list-unit-files [PATTERN...]        List installed unit files
  enable [UNIT...|PATH...]            Enable one or more unit files
  disable UNIT...                     Disable one or more unit files
  reenable UNIT...                    Reenable one or more unit files
  preset UNIT...                      Enable/disable one or more unit files
                                      based on preset configuration
  preset-all                          Enable/disable all unit files based on
                                      preset configuration
  is-enabled UNIT...                  Check whether unit files are enabled
  mask UNIT...                        Mask one or more units
  unmask UNIT...                      Unmask one or more units
  link PATH...                        Link one or more units files into
                                      the search path
  revert UNIT...                      Revert one or more unit files to vendor
                                      version
  add-wants TARGET UNIT...            Add 'Wants' dependency for the target
                                      on specified one or more units
  add-requires TARGET UNIT...         Add 'Requires' dependency for the target
                                      on specified one or more units
  edit UNIT...                        Edit one or more unit files
  get-default                         Get the name of the default target
  set-default TARGET                  Set the default target

Machine Commands:
  list-machines [PATTERN...]          List local containers and host

Job Commands:
  list-jobs [PATTERN...]              List jobs
  cancel [JOB...]                     Cancel all, one, or more jobs

Environment Commands:
  show-environment                    Dump environment
  set-environment VARIABLE=VALUE...   Set one or more environment variables
  unset-environment VARIABLE...       Unset one or more environment variables
  import-environment VARIABLE...      Import all or some environment variables

Manager State Commands:
  daemon-reload                       Reload systemd manager configuration
  daemon-reexec                       Reexecute systemd manager
  log-level [LEVEL]                   Get/set logging threshold for manager
  log-target [TARGET]                 Get/set logging target for manager
  service-watchdogs [BOOL]            Get/set service watchdog state

System Commands:
  is-system-running                   Check whether system is fully running
  default                             Enter system default mode
  rescue                              Enter system rescue mode
  emergency                           Enter system emergency mode
  halt                                Shut down and halt the system
  poweroff                            Shut down and power-off the system
  reboot                              Shut down and reboot the system
  kexec                               Shut down and reboot the system with kexec
  exit [EXIT_CODE]                    Request user instance or container exit
  switch-root ROOT [INIT]             Change to a different root file system
  suspend                             Suspend the system
  hibernate                           Hibernate the system
  hybrid-sleep                        Hibernate and suspend the system
  suspend-then-hibernate              Suspend the system, wake after a period of
                                      time, and hibernate
Options:
  -h --help              Show this help
     --version           Show package version
     --system            Connect to system manager
     --user              Connect to user service manager
  -H --host=[USER@]HOST  Operate on remote host
  -M --machine=CONTAINER Operate on a local container
  -t --type=TYPE         List units of a particular type
     --state=STATE       List units with particular LOAD or SUB or ACTIVE state
     --failed            Shortcut for --state=failed
  -p --property=NAME     Show only properties by this name
  -P NAME                Equivalent to --value --property=NAME
  -a --all               Show all properties/all units currently in memory,
                         including dead/empty ones. To list all units installed
                         on the system, use 'list-unit-files' instead.
  -l --full              Don't ellipsize unit names on output
  -r --recursive         Show unit list of host and local containers
     --reverse           Show reverse dependencies with 'list-dependencies'
     --with-dependencies Show unit dependencies with 'status', 'cat',
                         'list-units', and 'list-unit-files'.
     --job-mode=MODE     Specify how to deal with already queued jobs, when
                         queueing a new job
  -T --show-transaction  When enqueuing a unit job, show full transaction
     --show-types        When showing sockets, explicitly show their type
     --value             When showing properties, only print the value
     --check-inhibitors=MODE
                         Specify if checking inhibitors before shutting down,
                         sleeping or hibernating
  -i                     Shortcut for --check-inhibitors=no
     --kill-who=WHO      Whom to send signal to
  -s --signal=SIGNAL     Which signal to send
     --what=RESOURCES    Which types of resources to remove
     --now               Start or stop unit after enabling or disabling it
     --dry-run           Only print what would be done
                         Currently supported by verbs: halt, poweroff, reboot,
                             kexec, suspend, hibernate, suspend-then-hibernate,
                             hybrid-sleep, default, rescue, emergency, and exit.
  -q --quiet             Suppress output
     --wait              For (re)start, wait until service stopped again
                         For is-system-running, wait until startup is completed
     --no-block          Do not wait until operation finished
     --no-wall           Don't send wall message before halt/power-off/reboot
     --no-reload         Don't reload daemon after en-/dis-abling unit files
     --legend=BOOL       Enable/disable the legend (column headers and hints)
     --no-pager          Do not pipe output into a pager
     --no-ask-password   Do not ask for system passwords
     --global            Enable/disable/mask default user unit files globally
     --runtime           Enable/disable/mask unit files temporarily until next
                         reboot
  -f --force             When enabling unit files, override existing symlinks
                         When shutting down, execute action immediately
     --preset-mode=      Apply only enable, only disable, or all presets
     --root=PATH         Enable/disable/mask unit files in the specified root
                         directory
  -n --lines=INTEGER     Number of journal entries to show
  -o --output=STRING     Change journal output mode (short, short-precise,
                             short-iso, short-iso-precise, short-full,
                             short-monotonic, short-unix,
                             verbose, export, json, json-pretty, json-sse, cat)
     --firmware-setup    Tell the firmware to show the setup menu on next boot
     --boot-loader-menu=TIME
                         Boot into boot loader menu on next boot
     --boot-loader-entry=NAME
                         Boot into a specific boot loader entry on next boot
     --plain             Print unit dependencies as a list instead of a tree
     --timestamp=FORMAT  Change format of printed timestamps.
                         'pretty' (default): 'Day YYYY-MM-DD HH:MM:SS TZ
                         'us': 'Day YYYY-MM-DD HH:MM:SS.UUUUUU TZ
                         'utc': 'Day YYYY-MM-DD HH:MM:SS UTC
                         'us+utc': 'Day YYYY-MM-DD HH:MM:SS.UUUUUU UTC
     --read-only         Create read-only bind mount
     --mkdir             Create directory before mounting, if missing
     --marked            Restart/reload previously marked units
