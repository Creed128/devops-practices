# Testaufgabe 

###Toolstack:
* Vagrant
* Ansible
* Virtualbox
* Linux (Ubuntu Server)
* Docker
* postgres oder mariaDB
* myphpadmin
* sftp

* Erstelle via Vagrant 3 Virtuelle Maschinen (Ubuntu Server)
* Die VM's sollen im "virtuellen" Netzwerk miteinander verbunden sein und sich gegenseitig erreichen k√∂nnen
* Auf allen Servern soll es einen zus√§tzlichen User geben,der zu root werden kann und nur per public key Zugreifen kann (nicht per Passwort -> sshd_config)
* Manueller ssh login und der root user selber sollen deaktiviert werden
* Fertige zus√§tzlich eine Dokumentation deines Codes und der einzelnen Schritte an und pr√§sentiere dein Ergebnis Beim Live Code-Review.

### Zusatzaufgabe (optional):
  * Es gibt "Bonuspunkte" wenn du nach folgenden Best Practices vorgehst:
    * nutze eine ansible Control Node und f√ºhre die Konfiguration dar√ºber aus anstelle deines lokalen Rechners
    * Nutze ansible Vault um Passw√∂rter zu verschl√ºsseln
    * Nutze ansible Tags um die einzelnen Schritte zu gruppieren
    * Nutze ansible Roles um die einzelnen Schritte zu gruppieren
    * Nutze ansible Templates und Jinga2 um Konfigurationsdateien dynamisch zu erstellen
## Happy Coding! üöÄ

- ### Server 1: 
    
    * Webserver (nginx oder apache) mit kleiner Test Website und php Unterst√ºtzung, 
    
    * FTP Server mit Benutzer zum √ºbertragen von Webinhalten ins htdocs - manuell aufgesetzt      
    per ansible

- ### Server 2: 
    
    * Installation Docker, Deployment eines Wordpress oder √§hnlichem als Docker-Container

- ### Server 3: 
    
    * Datenbank (mysql, mariadb) f√ºr Server2 bereitstellen und mit Wordpress verbinden - per ansible aufgesetzt ohne docker zu nutzen.
